name: Java CICD with Gradle

on:
  push:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
       
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew 
        ./gradlew petlog-api:bootJar
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: petlog
        path: petlog-api/build/libs/petlog-api-0.0.1-SNAPSHOT.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_INSTANCE_SG_ID: ${{ secrets.AWS_SG_ID }}
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: petlog
        path: petlog-api/build/libs/

    - name: configure aws credential
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ap-northeast-2

    - name: get runner ip addresses
      id: ip
      uses: haythem/public-ip@v1.2

    - name: whitelist runner ip address
      run: |
        aws ec2 authorize-security-group-ingress --group-id $AWS_INSTANCE_SG_ID --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: Deploy to EC2
      run: |
        echo "${{ secrets.SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        scp -i private_key.pem -o StrictHostKeyChecking=no petlog-api/build/libs/petlog-api-0.0.1-SNAPSHOT.jar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/${{ secrets.USERNAME }}/petlog-api.jar
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} "sudo fuser -k 8001/tcp || true"
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} "sudo nohup java -jar -Dspring.profiles.active=dev -Duser.timezone=Aisa/Seoul -Djasypt.encryptor.password=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }} /home/${{ secrets.USERNAME }}/petlog-api.jar > app.log 2>&1 &"
        rm -f private_key.pem
        
    - name: revoke runner ip address
      run: |
        aws ec2 revoke-security-group-ingress --group-id $AWS_INSTANCE_SG_ID --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32 
